<%- include("../includes/head.ejs")%>
    <link rel="stylesheet" href="/css/Chat.css">
</head>
<body>
    <%- include("../includes/nav.ejs")%>
    <div data-aos="fade" data-aos-delay="400" class="container-fluid border border-3 border-dark-subtle bg-dark-subtle">
        <div class="row">
            <div class="col-lg-4 col-xl-4 border border-end-6 border-light-subtle">
                <div class="row mb-1">
                    <div class="col d-flex align-items-lg-center align-items-xl-center justify-content-center border-start border-muted border border-warning-subtle border-2" style="background: rgba(52,58,64,0.2);height: 4rem;"><button class="btn d-block d-sm-block d-md-block d-lg-none d-xl-none border-0 my-auto" type="button" style="width: 2.5rem;height: 2.5rem;"><i class="far fa-arrow-alt-circle-left"></i></button>
                        <h5 class="mr-auto my-auto">Welcome to SHOP CHAT</h5>
                    </div>
                </div>
                <div class="row">
                    <div class="col" style="overflow-x: none;overflow-y: auto;max-height: 32.5rem;height: auto;">
                        <ul class="list-unstyled">
                            <% if (rooms.length > 0) { %>
                                <% rooms.forEach(room => { %>
                                    <li id="room-list" style="cursor:pointer;">
                                        <input type="hidden" value="<%=room._id%>">
                                        <div class="card border-0 mb-1">
                                            <div class="card-body bg-light-subtle border border-1 rounded-2 border-dark-subtle">
                                                <% if (room.participants[0]._id.toString() !== userId.toString() && room.countUnRead !== 0) { %>
                                                    <span class="text-nowrap text-truncate text-uppercase text-white float-end p-1 text-center" style="width: 2rem;height: 2rem;border-radius: 15px;background: #00db5f;"><%=room.countUnRead%></span>
                                                <% } %>
                                                <h4 class="text-nowrap text-truncate card-title"><%=room.participants[0]._id.toString() === userId.toString() ? room.participants[1].username : room.participants[0].username%></h4>
                                                <h6 class="text-nowrap text-truncate text-muted card-subtitle mb-2" style="font-size: .7rem;"><%=room.messages[room.messages.length - 1].createdAt.toLocaleString('en-US', {timeZone: 'Asia/Ho_Chi_Minh'})%></h6>
                                                <h6 class="text-nowrap text-truncate text-muted card-subtitle mb-2"><%=room.messages[room.messages.length - 1].message%></h6>
                                            </div>
                                        </div>
                                    </li>
                                <% }) %>
                            <% } %>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col d-none d-sm-none d-md-none d-lg-block d-xl-block">
                <div class="row mb-1" id="userinfo">
                    <div class="col d-flex justify-content-center align-items-lg-center align-items-xl-center border-start border-muted border border-warning-subtle border-2" style="background: rgba(52,58,64,0.2);height: 4rem;"><button class="btn d-block d-sm-block d-md-block d-lg-none d-xl-none border-0 my-auto" type="button" style="width: 2.5rem;height: 2.5rem;"><i class="far fa-arrow-alt-circle-left"></i></button>
                        <h5 class="mr-auto my-auto"><%=room.participants[0]._id.toString() === userId.toString() ? room.participants[1].username : room.participants[0].username%></h5><span class="my-auto"><i class="fa fa-user mx-2"></i></span>
                    </div>
                </div>
                <div class="row px-3 py-2 border-start border-muted" id="content">
                    <div class="col" id="scroll-bar" style="overflow-x: none;overflow-y: auto;max-height: 30.5rem;height: auto;">
                        <ul class="list-unstyled" id="messages">
                            <input type="hidden" name="_csrf" value="<%=csrfToken%>">
                            <input type="hidden" name="roomId" value="<%=room._id%>">
                            <input type="hidden" name="receiver" value="<%=room.participants[1]._id%>">
                            <input type="hidden" name="jwttoken" value="<%=token%>">
                            <% if (room.messages.length > 0) { %>
                                <% room.messages.forEach(m => { %>
                                    <% if(userId.toString() === m.sender.toString()) { %>
                                        <li class="d-flex justify-content-end my-2">
                                            <div class="card border border-muted bg-light-subtle" style="width: 65%;border-top-left-radius: 20px;border-top-right-radius: 0px;border-bottom-right-radius: 20px;border-bottom-left-radius: 20px;">
                                                <div class="card-body text-center p-2">
                                                    <% if (m.url) { %>
                                                    <img class="img-fluid mb-2" src="/<%=m.url%>" style="max-height: 30rem;height: auto;min-height: 10rem;">
                                                    <% } %>
                                                    <p class="text-start card-text" style="font-size: 1rem;"><%= m.message %></p>
                                                    <h6 class="text-muted card-subtitle text-end" style="font-size: .75rem;"><%= m.sender.toString() === room.participants[0]._id.toString() ? room.participants[0].username : room.participants[1].username %> <%= m.createdAt.toLocaleString('en-US', {timeZone: 'Asia/Ho_Chi_Minh'}) %></h6>
                                                </div>
                                            </div>
                                        </li>
                                    <% } else { %>
                                        <li class="my-2" id="message">
                                            <div class="card border border-muted bg-light-subtle" style="width: 65%;border-top-left-radius: 0px;border-top-right-radius: 20px;border-bottom-right-radius: 20px;border-bottom-left-radius: 20px;">
                                                <div class="card-body text-center p-2">
                                                    <% if (m.url) { %>
                                                        <img class="img-fluid mb-2" src="/<%=m.url%>" style="max-height: 30rem;height: auto;min-height: 10rem;">
                                                    <% } %>
                                                    <p class="text-start card-text" style="font-size: 1rem;"><%= m.message %></p>
                                                    <h6 class="text-muted card-subtitle text-end" style="font-size: .75rem;"><%= m.sender.toString() === room.participants[0]._id.toString() ? room.participants[0].username : room.participants[1].username %> <%= m.createdAt.toLocaleString('en-US', {timeZone: 'Asia/Ho_Chi_Minh'}) %></h6>
                                                </div>
                                            </div>
                                        </li>
                                    <% } %>
                                <% }) %>
                            <% } %>
                        </ul>
                    </div>
                </div>
                <div class="row px-3 py-2" id="inputsend">
                    <div class="col-9 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        <input class="w-100 h-100 border border-3 rounded-3 px-3" name="message" style="resize: none;" type="text" placeholder="Type the message..." />
                    </div>
                    <div class="col-3 col-sm-2 col-md-2 col-lg-2 col-xl-2 text-nowrap d-md-flex justify-content-md-end p-0">
                        <button id="send" class="btn btn-outline-primary border border-3 border-dark-subtle rounded-3 w-auto" type="submit">
                            <i class="fa-brands fa-telegram fs-1"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
<script src="/js/bootstrap.min.js"></script>
<script src="/js/toolkit.min.js"></script>
<script src="/js/aos.min.js"></script>
<script src="/js/bs-init.js"></script>
<script src="/js/bold-and-bright.js"></script>
<!-- SET HEIGHT -->
<script>
    // set chiều cao cho content
    function setHeight() {
        // Lấy chiều cao của cửa sổ trình duyệt
        var windowHeight = window.innerHeight;
        // Lấy chiều cao của thanh điều hướng
        var navHeight = document.getElementsByTagName("nav")[0].offsetHeight;
        // Tính chiều cao của phần nội dung
        var containerHeight = windowHeight - navHeight;
        const inputHeight = document.getElementById("inputsend").offsetHeight; // Lấy chiều cao của input
        const userinfo = document.getElementById("userinfo").offsetHeight; // Lấy chiều cao của userinfo
        document.getElementById("content").style.height = (containerHeight - inputHeight - userinfo - 7) + "px"; // Set the height of the content element
        // Đặt chiều cao cho container-fluid và scroll-bar
        document.querySelector(".container-fluid").style.height = containerHeight + "px"; 
        document.getElementById("scroll-bar").style.height = (containerHeight - inputHeight - userinfo - 10) + "px";
    }

    setHeight();
    // Gọi hàm setHeight khi cửa sổ trình duyệt thay đổi kích thước
    window.addEventListener("resize", setHeight); 

    // Kéo xuống cuối cùng khi load trang
    const scrollBar = document.getElementById("scroll-bar"); // Lấy thẻ scroll-bar
    scrollBar.scrollTop = scrollBar.scrollHeight; // Đặt scroll-bar xuống cuối cùng
</script>

<!-- SOCKET CLIENT -->
<script type="module"> // Sử dụng module để import thư viện socket.io-client
    let chat = [] // Khởi tạo mảng chứa các message
    let data // Khởi tạo biến chứa dữ liệu từ server
    const roomId = document.querySelector("input[name='roomId']").value; // Lấy roomId từ input ẩn
    const token = document.querySelector("input[name='jwttoken']").value; // Lấy token từ input ẩn
    const messageTag = document.getElementById("messages"); // Lấy thẻ ul chứa các message
    fetch("/chat1" + "/" + roomId, { // Gửi request lên server để lấy dữ liệu
        method: "GET", // Phương thức GET
        headers: { // Các header cần thiết
            "Content-Type": "application/json", // Content-Type là application/json
            "Authorization": "Bearer " + token // Authorization là Bearer + token
        }
    }).then(js => js.json()) // Chuyển dữ liệu nhận được từ json sang javascript
    .then(res => { 
        data = res // Gán dữ liệu nhận được vào biến data
        chat = [...data.room.messages] // Gán các message vào mảng chat
    })
    import { io } from "/js/socket.io-client.min.js"; // Import thư viện socket.io-client (đã được tải về từ server vì đây là file view nên chir có thể impport được thư viện đã được public)
    const socket = new io("http://localhost:3000"); // Tạo 1 socket mới
    socket.on("connect", (socket) => { // Khi socket kết nối thành công
        console.log("Connected to server!");
    })
    // socket.emit("message", "Hello from client!") // Gửi 1 message lên server
    socket.on("message", (m) => { // Khi nhận được message từ server
        const lastli = messageTag.lastElementChild;
        // render message lên màn hình sau khi get messageTag
        const li = document.createElement("li"); // Tạo một thẻ li mới
        if(data.userId.toString() === m.chats.sender._id.toString()) { // Nếu người gửi là người đang đăng nhập
            li.classList.add("d-flex", "justify-content-end", "my-2"); // Thêm class vào thẻ li vừa tạo để hiển thị message bên phải
        }
        else { // Nếu người gửi không phải là người đang đăng nhập
            li.classList.add("my-2"); // Thêm class vào thẻ li vừa tạo để hiển thị message bên trái
        }
        const div = document.createElement("div"); // Tạo một thẻ div mới 
        div.classList.add("card", "border", "border-muted", "bg-light-subtle"); // Thêm class vào thẻ div vừa tạo
        div.style.width = "65%"; // Đặt chiều rộng của thẻ div vừa tạo
        if(data.userId.toString() === m.chats.sender._id.toString()) { // Nếu người gửi là người đang đăng nhập
            div.style.borderTopLeftRadius = "20px"; // Đặt border radius cho thẻ div vừa tạo
            div.style.borderTopRightRadius = "0px"; // Đặt border radius cho thẻ div vừa tạo
            div.style.borderBottomRightRadius = "20px"; // Đặt border radius cho thẻ div vừa tạo
            div.style.borderBottomLeftRadius = "20px"; // Đặt border radius cho thẻ div vừa tạo
        }
        else { // Nếu người gửi không phải là người đang đăng nhập
            div.style.borderTopLeftRadius = "0px";
            div.style.borderTopRightRadius = "20px";
            div.style.borderBottomRightRadius = "20px";
            div.style.borderBottomLeftRadius = "20px";
        }
        const div1 = document.createElement("div"); // Tạo một thẻ div mới để chứa nội dung message
        div1.classList.add("card-body", "text-center", "p-2"); // Thêm class vào thẻ div vừa tạo
        const img = document.createElement("img"); // Tạo một thẻ img mới để chứa ảnh
        if(m.url) { // Nếu message có chứa ảnh
            img.classList.add("img-fluid", "mb-2");
            img.src = "/" + m.chats.url; // Đặt src cho thẻ img vừa tạo
            img.style.maxHeight = "30rem"; // Đặt chiều cao tối đa cho thẻ img vừa tạo
            img.style.height = "auto"; // Đặt chiều cao cho thẻ img vừa tạo
            img.style.minHeight = "10rem"; // Đặt chiều cao tối thiểu cho thẻ img vừa tạo
        }
        const p = document.createElement("p"); // Tạo một thẻ p mới để chứa nội dung message
        p.classList.add("text-start", "card-text"); // Thêm class vào thẻ p vừa tạo
        p.style.fontSize = "1rem"; // Đặt font size cho thẻ p vừa tạo
        p.innerHTML = m.chats.message; // Đặt nội dung cho thẻ p vừa tạo
        const h6 = document.createElement("h6"); // Tạo một thẻ h6 mới để chứa người gửi và thời gian gửi message
        h6.classList.add("text-muted", "card-subtitle", "text-end"); // Thêm class vào thẻ h6 vừa tạo
        h6.style.fontSize = ".75rem"; // Đặt font size cho thẻ h6 vừa tạo
        h6.innerHTML = (m.chats.sender._id.toString() === m.countUnReadOnRoom.participants[0].toString() ? m.sender : m.receiver) + " " + m.time; // Đặt nội dung cho thẻ h6 vừa tạo
        div1.appendChild(img); // Thêm thẻ img vào thẻ div1
        div1.appendChild(p); // Thêm thẻ p vào thẻ div1
        div1.appendChild(h6); // Thêm thẻ h6 vào thẻ div1
        div.appendChild(div1); // Thêm thẻ div1 vào thẻ div
        li.appendChild(div); // Thêm thẻ div vào thẻ li
        lastli.insertAdjacentElement("afterend", li); // Thêm thẻ li vào sau thẻ li cuối cùng

        // Kéo xuống cuối cùng khi có message mới
        const scrollBar = document.getElementById("scroll-bar"); // Lấy thẻ scroll-bar
        scrollBar.scrollTop = scrollBar.scrollHeight; // Đặt scroll-bar xuống cuối cùng
    })
</script>

<!-- SELECT ROOM -->
<script>
    // Hàm cập nhật URL của trang web với roomId mới
    function updateURLParameter(roomId) {
        // Lấy URL hiện tại
        var currentURL = window.location.href;
        // Thêm hoặc cập nhật tham số roomId trong URL
        var updatedURL = currentURL.replace(/\/chat\/[^/]+/, '/chat/' + roomId);
        // Thay đổi URL của trình duyệt mà không làm tải lại trang
        window.history.pushState({ roomId: roomId }, '', updatedURL);
    }

    const rooms = document.querySelectorAll("#room-list"); // Lấy tất cả các phần tử cuộc trò chuyện
    rooms.forEach(room => {
        // Đặt sự kiện click cho mỗi phần tử cuộc trò chuyện
    room.addEventListener("click", () => {
        const roomId = room.querySelector("input").value; // Lấy roomId từ phần tử cuộc trò chuyện
        const token = document.querySelector("input[name='jwttoken']").value; // Lấy token từ input ẩn
        updateURLParameter(roomId); // Cập nhật URL của trang web với roomId mới
        // Thực hiện cuộc gọi AJAX để tải nội dung cuộc trò chuyện
        fetch(`/chat1/${roomId}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Authorization": "Bearer " + token
            }
        })
            .then(response => response.json())
            .then(data => {
                // Cập nhật nội dung cuộc trò chuyện trên trang web
                updateChatContent(data);
            })
            .catch(error => {
                console.error("Error loading chat content:", error);
            });
        });
    });
    // Hàm cập nhật nội dung cuộc trò chuyện với dữ liệu từ máy chủ
    function updateChatContent(chatData) {
    const messagesList = document.getElementById("messages"); // Lấy phần tử chứa các message
    // Tạo chuỗi HTML dựa trên dữ liệu chatData
    let htmlString = "";
    // Nếu có message
    if (chatData.room.messages.length > 0) {
        const csrf = document.querySelector("input[name='_csrf']").value; // CSRF Token
        const token = document.querySelector("input[name='jwttoken']").value; // JWT Token
        chatData.room.messages.forEach(m => { // Duyệt qua từng message
            htmlString += '<input type="hidden" name="_csrf" value="' + csrf + '">'; // CSRF Token
            htmlString += '<input type="hidden" name="roomId" value="' + chatData.room._id + '">'; // Room ID
            htmlString += '<input type="hidden" name="receiver" value="' + chatData.room.participants[1]._id + '">'; // Receiver ID
            htmlString += '<input type="hidden" name="jwttoken" value="' + token + '">'; // JWT Token
            htmlString += '<li class="'; // Bắt đầu một mục mới
            if (chatData.userId.toString() === m.sender.toString()) { // Nếu người gửi là người đang đăng nhập
                htmlString += 'd-flex justify-content-end my-2">'; // Hiển thị message bên phải
            } else { // Nếu người gửi không phải là người đang đăng nhập
                htmlString += 'my-2" id="message">'; // Hiển thị message bên trái
            }
            // Tạo thẻ div chứa message
            htmlString += '<div class="card border border-muted bg-light-subtle" style="width: 65%;';
            if (chatData.userId.toString() === m.sender.toString()) { // Nếu người gửi là người đang đăng nhập
                htmlString += 'border-top-left-radius: 20px;border-top-right-radius: 0px;border-bottom-right-radius: 20px;border-bottom-left-radius: 20px;">';
            } else {
                htmlString += 'border-top-left-radius: 0px;border-top-right-radius: 20px;border-bottom-right-radius: 20px;border-bottom-left-radius: 20px;">';
            }
            // Tạo thẻ div chứa nội dung message
            htmlString += '<div class="card-body text-center p-2">';
            // Nếu message có chứa ảnh
            if (m.url) {
                htmlString += '<img class="img-fluid mb-2" src="/' + m.url + '" style="max-height: 30rem;height: auto;min-height: 10rem;">';
            }
            // Tạo thẻ p chứa nội dung message
            htmlString += '<p class="text-start card-text" style="font-size: 1rem;">' + m.message + '</p>';
            htmlString += '<h6 class="text-muted card-subtitle text-end" style="font-size: .75rem;">';
            htmlString += (m.sender.toString() === chatData.room.participants[0]._id.toString() ? chatData.room.participants[0].username : chatData.room.participants[1].username) + ' ' + m.createdAt.toLocaleString('en-US', {timeZone: 'Asia/Ho_Chi_Minh'}) + '</h6>';
            // Kết thúc thẻ div chứa nội dung message
            htmlString += '</div></div></li>'; // Kết thúc mục
        });
    }
    // Gán chuỗi HTML đã tạo vào phần tử messagesList
    messagesList.innerHTML = htmlString;
    // Kéo xuống cuối cùng khi có message mới
    const scrollBar = document.getElementById("scroll-bar"); // Lấy thẻ scroll-bar
    scrollBar.scrollTop = scrollBar.scrollHeight; // Đặt scroll-bar xuống cuối cùng
}
</script>

<!-- SEND MESSAGE -->
<script>
    const send = document.getElementById("send"); // Lấy thẻ button send
    const parent = send.parentNode.parentNode; // Lấy thẻ cha của thẻ button send
    const input = parent.querySelector("input[name='message']") // Lấy thẻ input chứa message
    let message = ""; // Khởi tạo biến chứa message
    input.oninput = () => { // Khi nhập message
        message = input.value; // Gán message
    }
    document.addEventListener("keyup", (event) => { // Khi nhấn phím
        if (event.keyCode === 13 && message !== ""){ // Nếu nhấn phím Enter và message không rỗng
            send.click(); // Gọi sự kiện click cho button send
        }
    })
    send.addEventListener("click", () => { // Khi click button send
        const id = document.querySelector("input[name='roomId']").value; // Lấy roomId từ input ẩn
        const receiver = document.querySelector("input[name='receiver']").value; // Lấy receiver từ input ẩn
        const csrf = document.querySelector("input[name='_csrf']").value; // Lấy CSRF Token
        const token = document.querySelector("input[name='jwttoken']").value; // Lấy JWT Token
        // Xoá input
        input.value = "";
        // Gửi message lên server
        fetch("/chat", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": csrf,
                "Authorization": "Bearer " + token
            },
            body: JSON.stringify({
                message: message,
                receiver: receiver
            })
        })
        .then(res => res.json())
        .catch(err => console.log(err));
    })
</script>
</body>
</html>
