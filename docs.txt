Source code lấy từ folder 16. Advanced_Authentication, thêm module express-validator
-> Sử dụng {check} express-validator/check ở file routes như là 1 middleware để kiểm tra dữ liệu nhập vào (các thuộc tính của req) từ người dùng
-> Sử dụng {validationResult} express-validator/check ở file controllers để xử lý, lấy các thông báo lỗi từ việc kiểm tra dữ liệu nhập vào

Folder 17. Validation nói về việc xác thực dữ liệu nhập vào từ người dùng trước khi lưu vào database
-> việc xác thực dữ liệu nhập vào từ người dùng trước khi lưu vào database là rất quan trọng, nó giúp chúng ta tránh được các lỗi xảy ra trong quá trình lưu trữ dữ liệu vào database
-> việc xác thực dữ liệu đầu vào có thể xử lý ở client-side (tuy nhiên không nên vì có thể bị hack, truy cập mã nguồn để thay đổi code)
   hoặc ở server-side (nên làm)
=> Trong Folder này sẽ làm bên server-side
=> Có thể thay thế cho module flash bằng module express-validator để hiển thị các thông báo lỗi

1, Kiểm tra dữ liệu nhập vào từ người dùng khi đăng ký tài khoản ("routes/auth.js"), ("controllers/auth.js")
-> check username tồn tại hay chưa

-> check('email').isEmail().withMessage('Please enter a valid email') : kiểm tra email có đúng định dạng hay không (có @, có domain,...) nếu không thì trả về thông báo lỗi "Please enter a valid email" (có thể thay đổi thông báo lỗi bằng hàm withMessage) 

-> check("password").isLength({ min: 5 }).withMessage("Password must be at least 5 characters long") : kiểm tra độ dài của password có đủ 5 ký tự hay không nếu không thì trả về thông báo lỗi "Password must be at least 6 characters long" (có thể thay đổi thông báo lỗi bằng hàm withMessage)

-> check Re-passwords

*** các hàm check phải để trong mảng: [check(..), check(..), ...]
*** dùng hàm custom((value, {req}) => {}) để kiểm tra xem password có trùng với passwordConfirm hay không
   -> value là giá trị của password
   -> {req} là giá trị của req
   -> nếu password không trùng với passwordConfirm thì trả về thông báo lỗi "Password confirmation does not match password" (có thể thay đổi thông báo lỗi bằng hàm withMessage)

2, Kiểm tra dữ liệu nhập vào từ người dùng khi đăng nhập ("routes/auth.js"), ("controllers/auth.js")


   
*** Các thuộc tính của hàm check:
   -> isEmail() : kiểm tra email có đúng định dạng hay không (có @, có domain,...)
   -> isLength({min: 6}) : kiểm tra độ dài của password có đủ 6 ký tự hay không
   -> isEmpty() : kiểm tra xem có rỗng hay không
   -> withMessage() : trả về thông báo lỗi
   -> isAlphanumeric() : kiểm tra xem có phải là ký tự chữ và số hay không
   -> equals() : kiểm tra xem có bằng với giá trị truyền vào hay không
   -> trim() : xóa khoảng trắng ở đầu và cuối chuỗi
   -> normalizeEmail() : chuẩn hóa email (ví dụ: chữ hoa thành chữ thường, xóa khoảng trắng,...)
   -> isIn() : kiểm tra xem giá trị truyền vào có nằm trong mảng truyền vào hay không
   -> isFloat() : kiểm tra xem giá trị truyền vào có phải là số thực hay không
   -> isInt() : kiểm tra xem giá trị truyền vào có phải là số nguyên hay không
   -> isLength() : kiểm tra độ dài của chuỗi
   -> isAfter() : kiểm tra xem giá trị truyền vào có lớn hơn giá trị truyền vào hay không
   -> isBefore() : kiểm tra xem giá trị truyền vào có nhỏ hơn giá trị truyền vào hay không
   -> isDate() : kiểm tra xem giá trị truyền vào có phải là ngày tháng hay không
   -> isPostalCode() : kiểm tra xem giá trị truyền vào có phải là mã bưu điện hay không
   -> isMobilePhone() : kiểm tra xem giá trị truyền vào có phải là số điện thoại hay không
   -> isCreditCard() : kiểm tra xem giá trị truyền vào có phải là số thẻ tín dụng hay không
   -> isCurrency() : kiểm tra xem giá trị truyền vào có phải là tiền tệ hay không
   -> isMongoId() : kiểm tra xem giá trị truyền vào có phải là id của MongoDB hay không
   -> isURL() : kiểm tra xem giá trị truyền vào có phải là URL hay không
   -> isIP() : kiểm tra xem giá trị truyền vào có phải là IP hay không
   -> isMACAddress() : kiểm tra xem giá trị truyền vào có phải là địa chỉ MAC hay không
   -> isBoolean() : kiểm tra xem giá trị truyền vào có phải là boolean hay không
   -> custom() : kiểm tra xem giá trị truyền vào có thỏa mãn điều kiện nào đó hay không (ví dụ: kiểm tra xem email đã tồn tại trong database hay chưa,...) (có thể truyền vào 1 hàm để kiểm tra)
